{{define "homeBodyPartThree"}}



	<script type="text/babel">
		'use strict';
		const mgTopChatBoxScrolledTop={width:"100%",height:"250px",marginTop:"-255px",border:"1px solid #e6ecf0",backgroundColor:"#f5f8fa"};
		const chtBxHead={width:"100%",height:"20px",backgroundColor:"white"};
		const chtBxBody={width:"99%",height:"195px",border:"1px solid #e6ecf0",backgroundColor:"transparent"};
		const chtBxFoot={width:"100%",height:"35px",backgroundColor:"white",border:"1px solid #e6ecf0"};
		const flexChatFoot={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const msgBoxActualIp={width:"75%",height:"25px",textIndent:"10px",border:"1px solid #e6ecf0"};
		const sendBtMessage={backgroundColor:"transparent",border:"1px solid #e6ecf0",cursor:"pointer"};
		const flexChatHead={width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center"};
		const fontingMinimise={marginRight:"10px",cursor:"pointer"};
		const fontingClose={cursor:"pointer"};
		class ChatBoxBodyHidden extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					moto:this.props.pr,
					msgBoxVal:"",
					loler:[],
					mapOption:true
				};
				this._fonting_minimise_clk=this._fonting_minimise_clk.bind(this);
				this._fonting_close_clk=this._fonting_close_clk.bind(this);
				this._msg_box_change=this._msg_box_change.bind(this);
				this._send_msg_ajax=this._send_msg_ajax.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
				this.componentWillReceiveProps=this.componentWillReceiveProps.bind(this);
				this.componentDidUpdate=this.componentDidUpdate.bind(this);
			}
			componentWillReceiveProps(nextProps){
				var that=this;
				console.log("gently tears falling");
				console.log(nextProps);
				console.log(this.props);
				var dbNissan = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
				dbNissan.transaction(function (tx) {
					 tx.executeSql(`SELECT * FROM MESSAGECONTENTMY WHERE toA=${JSON.parse(nextProps.pr).id}`, [], function (tx, results) {
							console.log(results.rows.map);
							var arx=[];
							for(var pxc of results.rows){
								console.log("lojjjjjjjjjjjj");
								console.log(that.state.moto);
								console.log(pxc.toA);
								if(JSON.parse(nextProps.pr).id==pxc.toA){
									arx.push({to:pxc.toA,from:pxc.fromA,value:pxc.contentA})
								}

							}
							console.log("arrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
							console.log(arx);
							let more
							that.setState({
								loler:arx
							})
					 }, null);

				});
				console.log(that.state.loler);
			}
			componentWillMount(){

				/*var that=this;
				var db8 = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
				db8.transaction(function (tx) {
					 tx.executeSql(`SELECT * FROM MESSAGECONTENTMY WHERE toA=${JSON.parse(that.state.moto).id}`, [], function (tx, results) {
							console.log(results.rows.map);
							var arx=[];
							for(const pxc of results.rows){
								arx.push({to:pxc.toA,from:pxc.fromA,value:pxc.contentA})
							}
							that.setState({
								loler:arx
							})
					 }, null);

				});*/
			}
			componentDidUpdate(prevProps, prevState){
				console.log("componentDidUpdate updatinggggggg");
				console.log(prevProps);
				console.log(prevState);
				/*var that=this;
				var db8 = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
				db8.transaction(function (tx) {
					 tx.executeSql(`SELECT * FROM MESSAGECONTENTMY WHERE toA=${JSON.parse(that.state.moto).id}`, [], function (tx, results) {
							console.log(results.rows.map);
							var arx=[];
							for(const pxc of results.rows){
								arx.push({to:pxc.toA,from:pxc.fromA,value:pxc.contentA})
							}
							that.setState({
								loler:arx
							})
					 }, null);

				});*/
			}
			componentDidMount(){
				var that=this;
				var db8 = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
				db8.transaction(function (tx) {
					 tx.executeSql(`SELECT * FROM MESSAGECONTENTMY WHERE toA=${JSON.parse(that.state.moto).id}`, [], function (tx, results) {
							console.log(results.rows.map);
							var arx=[];
							for(var pxc of results.rows){
								console.log("lojjjjjjjjjjjj");
								console.log(that.state.moto);
								console.log(pxc.toA);
								if(JSON.parse(that.state.moto).id==pxc.toA){
									arx.push({to:pxc.toA,from:pxc.fromA,value:pxc.contentA})
								}

							}
							that.setState({
								loler:arx
							})
					 }, null);

				});




				/*var db23 = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
				db23.transaction(function (tx) {
					 tx.executeSql('SELECT * FROM CHATFLAGALL', [], function (tx, results) {
							/*let lokloinasa=new Map();
							for(const pl of results.rows){
									lokloinasa.set(pl.id,{id:pl.id,name:pl.name,image:pl.image})
							}
							var event = new CustomEvent(
								"chat_head_own_child",
								{
									detail: lokloinasa,
										bubbles: true,
										cancelable: true
									}
								);
								window.dispatchEvent(event);

								for(const pl of results.rows){
										for (const kl of window.__display_active_chatter) {
											console.log(pl.id);
											console.log(kl);
											if(pl.id==kl[0]){
												console.log("pilling"+kl[0]);
												//ReactDOM.render(<SudoChatBox M={window.__display_active_chatter} />,document.getElementById('_chat_container'))
												//ReactDOM.render(<ChatBoxBodyHidden pr={JSON.stringify({id:kl[0],name:kl[1].name,image:kl[1].image})} />,document.getElementById(`${kl[0]}`))
												console.log(document.getElementById(`${kl[0]}`));
												if(that.state.mapOption){
													document.getElementById(`${kl[0]}`).getElementsByClassName('_fonting_minimise')[0].click();
													document.getElementById(`${kl[0]}`).parentElement.getElementsByClassName('_fonting_maximise')[0].click();
												}
											}else {
												console.log("elseieieieieeiieieeiie");
											}
										}
								}
					 }, null);

				});*/
			}
			_send_msg_ajax(evt){
				evt.preventDefault();
				evt.stopPropagation();
				var that=this;
				let cx=evt.target.parentElement.lastChild.value;
				console.log("styling rehnuma");
				console.log(cx);
				console.log(that.state.msgBoxVal);
				var db7 = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);

				db7.transaction(function (tx) {
					 tx.executeSql('CREATE TABLE IF NOT EXISTS MESSAGECONTENTMY (id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, toA, fromA, contentA)');
					 tx.executeSql(("INSERT INTO MESSAGECONTENTMY (toA, fromA, contentA) VALUES (?, ?, ?);"),[JSON.parse(cx).id,"ajay",that.state.msgBoxVal]);
				});
			}
			_msg_box_change(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
					msgBoxVal:evt.target.value
				});
			}
			_fonting_close_clk(evt){
				evt.preventDefault();
				evt.stopPropagation();
				var that=this;
				console.log("deleting following");
				console.log(JSON.parse(that.state.moto).name);
				ReactDOM.unmountComponentAtNode(document.getElementById(JSON.parse(that.state.moto).id))
				var db = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);

				db.transaction(function (tx) {
					 tx.executeSql(`DELETE FROM MESSAGES WHERE id=${JSON.parse(that.state.moto).id}`);
				});

				db.transaction(function (tx) {
					 tx.executeSql('SELECT * FROM MESSAGES', [], function (tx, results) {
							console.log(results.rows.map);
							let mbvcghd=new Map();
							for(var p of results.rows){
								mbvcghd.set(p.id,{name:p.name,image:p.image})
							}
							console.log(mbvcghd);
							var event = new CustomEvent(
								"chat_head",
								{
									detail: mbvcghd,
										bubbles: true,
										cancelable: true
									}
								);
								window.dispatchEvent(event);
					 }, null);

				});

			}
			_fonting_minimise_clk(evt){
				evt.preventDefault();
				evt.stopPropagation();
				//console.log(this.state.);
				var that=this;
				var db = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);

				db.transaction(function (tx) {

					 //tx.executeSql(`DELETE FROM MESSAGES WHERE id=${JSON.parse(cvz).id}`);
					 tx.executeSql(`DELETE FROM CHATFLAGALL WHERE id=${JSON.parse(that.state.moto).id}`);
				});
				ReactDOM.unmountComponentAtNode(evt.target.parentElement.parentElement.parentElement.parentElement)
			}
			render(){
				return (
					<div style={mgTopChatBoxScrolledTop}>
						<div style={chtBxHead}>
						<div style={flexChatHead}>
							<font className="_fonting_minimise" size={5} style={fontingMinimise} onClick={this._fonting_minimise_clk}>&#10134;</font>
							{/*<font size={5} style={fontingClose} onClick={this._fonting_close_clk}>&#9747;</font>*/}
						</div>
						</div>
						<div style={chtBxBody}>
							{
								this.state.loler.map( (a,b) => {
										console.log(JSON.parse(this.state.moto).id);
										console.log(a);
									if(true){
										return (
											<div key={b}>
												{
													a.value
												}
											</div>
										)
									}else {
										console.log("mapper else each message");
									}
								} )
							}
						</div>
						<div style={chtBxFoot}>
							<div style={flexChatFoot}>
								<input type="text" style={msgBoxActualIp} placeholder="type message" onChange={this._msg_box_change} />
								<input type="button" style={sendBtMessage} value="send" onClick={this._send_msg_ajax} />
								<input type="hidden" value={this.state.moto} />
							</div>
						</div>
					</div>
				)
			}
		}

		const ChatBoxContainer={width:"100%",height:"100%"};
		const indiChatHeadClickable={width:"24%",marginLeft:"1%",height:"100%",display:"inline",float:"right"};
		const my_divi_co_st={width:"99%",height:"100%",backgroundColor:"white",border:"1px solid #e6ecf0"};
		const my_divi_co_st_fc={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const my_divi_co_st_fc_ob={cursor:"pointer"};
		const afterMountChatClickableImage={width:"30px",height:"30px",marginRight:"10px",borderRadius:"50%"};
		const fontingClose_sclickable={marginLeft:"100px",cursor:"pointer"}
		class SudoChatBox extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					psudoChatArray:this.props.M
				};
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentWillReceiveProps=this.componentWillReceiveProps.bind(this);
				this._fontingIndiChatBox=this._fontingIndiChatBox.bind(this);
				this._fonting_close_clk_sclickable=this._fonting_close_clk_sclickable.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
			}
			componentDidMount(){
				var that=this;
				let oor=this.state.psudoChatArray;
				var db23 = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
				db23.transaction(function (tx) {
					 tx.executeSql('SELECT * FROM CHATFLAGALL', [], function (tx, results) {
							/*let lokloinasa=new Map();
							for(const pl of results.rows){
									lokloinasa.set(pl.id,{id:pl.id,name:pl.name,image:pl.image})
							}
							var event = new CustomEvent(
								"chat_head_own_child",
								{
									detail: lokloinasa,
										bubbles: true,
										cancelable: true
									}
								);
								window.dispatchEvent(event);*/
								// window.__display_active_chatter
								for(var pl of results.rows){
										for (var kl of oor) {
											console.log(pl.id);
											console.log(kl);
											if(pl.id==kl[0]){
												console.log("pilling"+kl[0]);
												//ReactDOM.render(<SudoChatBox M={window.__display_active_chatter} />,document.getElementById('_chat_container'))
												//ReactDOM.render(<ChatBoxBodyHidden pr={JSON.stringify({id:kl[0],name:kl[1].name,image:kl[1].image})} />,document.getElementById(`${kl[0]}`))
												console.log(document.getElementById(`${kl[0]}`));
												if(document.getElementById(`${kl[0]}`).getElementsByClassName('_fonting_minimise')[0]!=undefined)
												{

												}
												//document.getElementById(`${kl[0]}`).getElementsByClassName('_fonting_minimise')[0].click();
												//ReactDOM.unmountComponentAtNode(document.getElementById(`${kl[0]}`));
												document.getElementById(`${kl[0]}`).parentElement.getElementsByClassName('_fonting_maximise')[0].click();

											}
										}
								}
					 }, null);

				});
			}
			_fonting_close_clk_sclickable(evt){
				evt.preventDefault();
				evt.stopPropagation();
				var that=this;
				let cvz=evt.target.parentElement.lastChild.value;
				console.log("deleting following");
				//console.log(JSON.parse(that.state.moto).name);
				//ReactDOM.unmountComponentAtNode(document.getElementById(JSON.parse(cvz).id))
				var db = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);

				db.transaction(function (tx) {
					 tx.executeSql(`DELETE FROM MESSAGES WHERE id=${JSON.parse(cvz).id}`);
					 tx.executeSql(`DELETE FROM CHATFLAGALL WHERE id=${JSON.parse(cvz).id}`);
				});
				var dbAccount = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
				dbAccount.transaction(function (tx) {
					 tx.executeSql('SELECT * FROM MESSAGES', [], function (tx, results) {
							console.log(results.rows.map);
							let mbvcghdof=new Map();
							for(var p of results.rows){
								mbvcghdof.set(p.id,{id:p.id,name:p.name,image:p.image,extra:p.id})
							}
							console.log(mbvcghdof);
							var event = new CustomEvent(
								"chat_head",
								{
									detail: mbvcghdof,
										bubbles: true,
										cancelable: true
									}
								);
								window.dispatchEvent(event);
					 }, null);

				});
				/*var db2 = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
				db2.transaction(function (tx) {
					 tx.executeSql('SELECT * FROM CHATFLAGALL', [], function (tx, results) {
							let lokloinasa=new Map();
							for(const p of results.rows){
									lokloinasa.set(p.id,{id:p.id,name:p.name,image:p.image})
							}
							var event = new CustomEvent(
								"chat_head_own_child",
								{
									detail: lokloinasa,
										bubbles: true,
										cancelable: true
									}
								);
								window.dispatchEvent(event);
					 }, null);

				});*/
			}
			_fontingIndiChatBox(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let cv=evt.target.parentElement.lastChild.value;
				console.log(cv);


				var db = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);

				db.transaction(function (tx) {
					 tx.executeSql('CREATE TABLE IF NOT EXISTS CHATFLAGALL (id unique,name,image )');
					 tx.executeSql(`INSERT INTO CHATFLAGALL (id, name, image) VALUES (${JSON.parse(cv).id}, "${JSON.parse(cv).name}","${JSON.parse(cv).image}")`);
				});


				// ref   evt.target.parentElement.parentElement.parentElement.firstChild     next line element
				ReactDOM.render(<ChatBoxBodyHidden pr={cv} />,document.getElementById(JSON.parse(cv).id))
			}
			componentWillReceiveProps(nextProps){
				this.setState({
					psudoChatArray:nextProps.M
				})
				console.log("main hun na baby saath tere ");
				console.log(this.state.psudoChatArray);
				console.log(nextProps.M);
				console.log("main hun na baby saath tere ");

				let oor=this.state.psudoChatArray;
				var db254 = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
				db254.transaction(function (tx) {
					 tx.executeSql('SELECT * FROM CHATFLAGALL', [], function (tx, results) {
							/*let lokloinasa=new Map();
							for(const pl of results.rows){
									lokloinasa.set(pl.id,{id:pl.id,name:pl.name,image:pl.image})
							}
							var event = new CustomEvent(
								"chat_head_own_child",
								{
									detail: lokloinasa,
										bubbles: true,
										cancelable: true
									}
								);
								window.dispatchEvent(event);*/
								// window.__display_active_chatter
								for(var pl of results.rows){
										for (var kl of oor) {
											console.log(pl.id);
											console.log(kl);
											if(pl.id==kl[0]){
												console.log("pilling"+kl[0]);
												//ReactDOM.render(<SudoChatBox M={window.__display_active_chatter} />,document.getElementById('_chat_container'))
												//ReactDOM.render(<ChatBoxBodyHidden pr={JSON.stringify({id:kl[0],name:kl[1].name,image:kl[1].image})} />,document.getElementById(`${kl[0]}`))
												console.log(document.getElementById(`${kl[0]}`));
												if(document.getElementById(`${kl[0]}`).getElementsByClassName('_fonting_minimise')[0]!=undefined)
												{

												}
												//document.getElementById(`${kl[0]}`).getElementsByClassName('_fonting_minimise')[0].click();
												//ReactDOM.unmountComponentAtNode(document.getElementById(`${kl[0]}`));
												document.getElementById(`${kl[0]}`).parentElement.getElementsByClassName('_fonting_maximise')[0].click();

											}
										}
								}
					 }, null);

				});
			}
			componentWillMount(){

			}
			render(){
				var st=[];
				var ctr=0;
				this.state.psudoChatArray.forEach( (a,b) => {
					st.push({name:a.name,id:a.id,image:a.image});
					ctr=ctr+1;
				} )
				console.log(st);
				return (
					<div style={ChatBoxContainer}>
									{
										st.map( (a,b)=>{
											return (
												<div key={b} style={indiChatHeadClickable}>
													<div id={a.id} className="_the_unknown_girl">
													</div>
													<div style={my_divi_co_st}>
														<div style={my_divi_co_st_fc}>
															<img src={a.image} style={afterMountChatClickableImage} /><font className="_fonting_maximise" style={my_divi_co_st_fc_ob} size={4} onClick={this._fontingIndiChatBox}>{a.name}</font><font size={5} style={fontingClose_sclickable} onClick={this._fonting_close_clk_sclickable}>&#9747;</font><input type="hidden" value={JSON.stringify(a)} />
														</div>
													</div>
												</div>
											)
										} )
									}
					</div>
				)
			}
		}


		function openInNewTab(url) {
  		var win = window.open(url, '_blank');
  		win.focus();
		}


		const mostPopularVideoYoutube={width:"100%",height:"100%"};
		var myNewsBoxEach=(opacity)=>{
			return {width:"100%",opacity:opacity};
		}
		var newsImageStyle=(width)=>{
			return {width:width,height:"250px",position:"absolute",borderRadius:"50px",marginLeft:"10px"};
		}
		const myNewsSourceDetails={width:"100%",height:"50px",display:"flex",justifyContent:"center",alignItems:"center"};
		const spanningClickableNews={color:"black",cursor:"pointer",fontSize:"large"};
		var myHeartIsFull=(bColor)=>{
			return {width:"20px",height:"250px",position:"absolute",backgroundColor:"transparent"};
		}
		var myHeartIsFullRightSide=(bColor)=>{
			return {width:"20px",height:"250px",position:"absolute",backgroundColor:"transparent",right:"9%"};
		}
		const selectStyleNewsChannel={fontSize:"larger",backgroundColor:"transparent",border:"1px solid #e6ecf0"};
		const tujhmeRabDikhtaHai={width:"100%",height:"250px",overflowY:"scroll"};
		var absSpanningSpan=(width,bColor) =>{
			return {position:"relative",width:width,marginLeft:"25px",top:"190px",textAlign:"center",backgroundColor:bColor};
		}
		const iLeftMyHeart={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const fontwaCursor={cursor:"pointer"};
		const rightImage={width:"100%",height:"40px"};
		var imageKaBaap=(bColor)=>{
			return {backgroundColor:bColor,cursor:"pointer"};
		}
		class YoutubeMostPopular extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					inputArr:[],
					source:"",
					l:"national-geographic",
					opacity:1,
					cur:[],
					dEnabled:"transparent",
					pos:0
				};
				this.componentDidMount=this.componentDidMount.bind(this);
				this._my_news_option_change=this._my_news_option_change.bind(this);
				this._saliyada_muhammad=this._saliyada_muhammad.bind(this);
				this._mm_img_bbap_enter=this._mm_img_bbap_enter.bind(this);
				this._mm_img_bbap_leave=this._mm_img_bbap_leave.bind(this);
				this._clicking_for_next_news=this._clicking_for_next_news.bind(this);
				this._clicking_for_previous_very_news=this._clicking_for_previous_very_news.bind(this);
			}
			_clicking_for_previous_very_news(evt){
				evt.preventDefault();
				evt.stopPropagation();
				if (this.state.pos<this.state.inputArr.length && this.state.pos>0) {
					let arx=[];
					arx.push(this.state.inputArr[this.state.pos-1]);
					this.setState({
						cur:arx,
						pos:this.state.pos-1
					})
				}else if (this.state.pos==0) {
					let arx=[];
					arx.push(this.state.inputArr[this.state.inputArr.length-1]);
					this.setState({
						cur:arx,
						pos:this.state.inputArr.length-1
					})
				}
			}
			_clicking_for_next_news(evt){
				evt.preventDefault();
				evt.stopPropagation();
				if (this.state.pos<this.state.inputArr.length-1) {
					let arx=[];
					arx.push(this.state.inputArr[this.state.pos+1]);
					this.setState({
						cur:arx,
						pos:this.state.pos+1
					})
				}else if (this.state.pos==this.state.inputArr.length-1) {
					let arx=[];
					arx.push(this.state.inputArr[0]);
					this.setState({
						cur:arx,
						pos:0
					})
				}
			}
			_mm_img_bbap_leave(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
					dEnabled:"transparent"
				});
			}
			_mm_img_bbap_enter(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
					dEnabled:"white"
				});
			}
			_saliyada_muhammad(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.persist();
				console.log(evt.target.parentElement.parentElement.lastChild.value);
				openInNewTab(JSON.parse(evt.target.parentElement.parentElement.lastChild.value).url)
			}
			_my_news_option_change(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
					opacity:0.2
				})
				evt.persist();
				var that=this;
				Rx.Observable.ajax({ url: `/mostPopularVideo/${evt.target.value}`, responseType: 'json',method:'GET'}).map(data=>data.response)
				.subscribe(
				function (data) {
					console.log(data);
					let os=data.articles[0]
					let ms=[];
					ms.push(os)
					that.setState({
						inputArr:data.articles,
						cur:ms,
						source:data.source,
						opacity:1
					});


				},
			function (error) {
					console.log(error);
				}
			);
			}
			componentDidMount(){
				var that=this;
				Rx.Observable.ajax({ url: `/mostPopularVideo/${that.state.l}`, responseType: 'json',method:'GET'}).map(data=>data.response)
				.subscribe(
				function (data) {
					console.log(data);
					let os=data.articles[0]
					let ms=[];
					ms.push(os)
					that.setState({
						inputArr:data.articles,
						cur:ms,
						source:data.source
					});


				},
			function (error) {
					console.log(error);
				}
			);
			}
			render(){
				//var ofgh=document.getElementById('_pyar_wala_part_3').clientWidth+"px";
				return (
					<div style={mostPopularVideoYoutube}>
						<div style={myNewsSourceDetails}>
							<select style={selectStyleNewsChannel} onChange={this._my_news_option_change}>
								<option value="national-geographic">National-Geographic</option>
								<option value="cnn">CNN</option>
								<option value="bbc-news">BBC News</option>
								<option value="bbc-sport">BBC Sport</option>
								<option value="breitbart-news">Breitbrat News</option>
								<option value="business-insider">Business Insider</option>
								<option value="buzzfeed">Buzzfeed</option>
								<option value="cnbc">CNBC</option>
								<option value="entertainment-weekly">Entertainment Weekly</option>
								<option value="espn">ESPN</option>
								<option value="espn-cric-info">ESPN Cric Info</option>
								<option value="google-news">Google News</option>
							</select>
						</div>
						<div id="_unique_id_for_hide_news_scrollbar" style={tujhmeRabDikhtaHai} onMouseEnter={this._mm_img_bbap_enter} onMouseLeave={this._mm_img_bbap_leave}>
						{
							this.state.cur.map( (a,b) => {

								return (
									<div key={b} style={myNewsBoxEach(this.state.opacity)}>
										<img src={a.urlToImage} style={newsImageStyle(document.getElementById('_pyar_wala_part_3').clientWidth-20+"px")} />
										<div style={myHeartIsFull(this.state.dEnabled)}>
											<div style={iLeftMyHeart}>
												<div style={imageKaBaap(this.state.dEnabled)} onClick={this._clicking_for_previous_very_news}>
													<img src="left-arrow-image.jpg" style={rightImage} />
												</div>
											</div>
										</div>
										<div style={myHeartIsFullRightSide(this.state.dEnabled)}>
											<div style={iLeftMyHeart}>
												<div style={imageKaBaap(this.state.dEnabled)}  onClick={this._clicking_for_next_news}>
													<img src="left-arrow-right-hi.png" style={rightImage} />
												</div>
											</div>
										</div>
										<div style={absSpanningSpan(document.getElementById('_pyar_wala_part_3').clientWidth-50+"px",this.state.dEnabled)}>
											<span style={spanningClickableNews} onClick={this._saliyada_muhammad}>{a.title}</span>
										</div>

										<input type="hidden" value={JSON.stringify(a)} />
									</div>
								)
							} )
						}
						</div>
					</div>
				)
			}
		}



		const homeBodyMainStyle={width:"100%",height:"100%",marginTop:"55px"};
		const home_p_three_white={width:"70%",height:"100%",backgroundColor:"white",border:"1px solid lightgrey",float:"left"};
		const partThreeTrndings={width:"100%",height:"300px"};
		const partThreeLinkedFaces={width:"100%",height:"900px",overflowY:"scroll"};
		const mlMyLinkFSup={width:"100%",height:"40px",display:"flex",justifyContent:"center",alignItems:"center",marginBottom:"20px"}
		const myLinkefaceUI={width:"99%",height:"30px",display:"flex",justifyContent:"flex-start",alignItems:"center",marginBottom:"10px",backgroundColor:"white",cursor:"pointer",fontFamily:'"Helvetica Neue", Helvetica, Arial, sans-serif'};
		const myImgStyleOfLogoFacesLinked={width:"30px",height:"30px",marginRight:"20px",marginLeft:"30px",borderRadius:"50%"};
		const myLfTextStyle={fontFamily:'"Helvetica Neue", Helvetica, Arial, sans-serif'};
		const non_empty_end={textAlign:"center"};
		//var th=[


		class HomeBodyPartThree extends React.Component {
			constructor(props){
				super(props);
				this.state = {
					faceMapper:[
						{{range $i,$a:= .}}[{{range $c,$b:= $a}}{{$b}}{{ $length := len $b }}{{$l:=decreased $length}}{{if lt $c $l}},{{end}}{{end}}],{{end}}
					]
					};
				this.componentDidMount=this.componentDidMount.bind(this);
				this._mm_faceClickOpenChat=this._mm_faceClickOpenChat.bind(this);
				this.componentWillMount=this.componentWillMount.bind(this);
			}
			_mm_faceClickOpenChat(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.persist();
				var jsd=JSON.parse(evt.target.lastChild.value);
				var mn=jsd[1];
				var mv=jsd[0];
				var mnbvg=jsd[2]
				console.log(mv);
				console.log(mn);
				var db = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);

				db.transaction(function (tx) {
					 tx.executeSql('CREATE TABLE IF NOT EXISTS MESSAGES (id unique, name, image)');
					 tx.executeSql(`INSERT INTO MESSAGES (id, name, image) VALUES (${mn}, "${mv}","${mnbvg}")`);
				});

				db.transaction(function (tx) {
					 tx.executeSql('SELECT * FROM MESSAGES', [], function (tx, results) {
							console.log(results.rows.map);
							let mbvcghd=new Map();
							for(var p of results.rows){
								mbvcghd.set(p.id,{id:p.id,name:p.name,image:p.image})
							}
							console.log(mbvcghd);
							var event = new CustomEvent(
								"chat_head",
								{
									detail: mbvcghd,
										bubbles: true,
										cancelable: true
									}
								);
								window.dispatchEvent(event);
					 }, null);

				});


				/*var db3 = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
				db3.transaction(function (tx) {
					 tx.executeSql('SELECT * FROM CHATFLAGALL', [], function (tx, results) {
							let lokloinasa=new Map();
							for(const q of results.rows){
									lokloinasa.set(q.id,{id:q.id,name:q.name,image:q.image})
							}
							var event = new CustomEvent(
								"chat_head_own_child",
								{
									detail: lokloinasa,
										bubbles: true,
										cancelable: true
									}
								);
								window.dispatchEvent(event);
					 }, null);

				});*/


				/*if (sessionStorage.psudoChatArray==undefined) {
					//let st=JSON.parse(sessionStorage.psudoChatArray).chatArray;
					let ar=[];
					let mp=new Map();
					mp.set("name",evt.target.innerText);
					mp.set("id",evt.target.lastChild.value);
					let mnp=new Map();
					mp.set("message",mnp)
					ar.push(mp)
					console.log(mp);
					console.log(ar);
					console.log("if");
					//let ob={name:evt.target.innerText,id:JSON.parse(evt.target.lastChild.value),message:[]}
					let st=JSON.stringify({chatArray:ar})
					console.log(st);
					sessionStorage.psudoChatArray=st;
				}else {
					let mp=new Map();
					console.log("else");
					mp.set("name",evt.target.innerText);
					mp.set("id",evt.target.lastChild.value);
					let mnp=new Map();
					mp.set("message",mnp)
					//let ob={name:evt.target.innerText,id:JSON.parse(evt.target.lastChild.value),message:[]}
					let st=JSON.parse(sessionStorage.psudoChatArray).chatArray;
					st.push(mp);
					let str=JSON.stringify({chatArray:st})
					sessionStorage.psudoChatArray=str;
				}*/

			}
			componentWillMount(){
				const mpof=new Map();
				const mnof=new Map();
				const resmnE=new Map()
				window.__active_chater=mpof;
				window.__display_active_chatter=mnof;
				window.addEventListener("chat_head",(evt) => {
					console.log(evt.detail);
					console.log("logged");
					/*let ifferMaula=document.getElementsByClassName('_the_unknown_girl');
					if(ifferMaula.length>0){
						for (var pyas = 0; pyas < ifferMaula.length; pyas++) {
							ReactDOM.unmountComponentAtNode(ifferMaula[pyas])
						}
					}*/





					const sz=evt.detail.size;
					var ctr=0;
					var mps=new Map();
					var mpsof=new Map();
					evt.detail.forEach( (a,b) => {
						mps.set(b,a);
						ctr=ctr+1;
						if(ctr>sz-4){
							mpsof.set(b,a)
						}

					} )
					window.__active_chater=mps;
					window.__display_active_chatter=mpsof;
					console.log("active chatter");
					console.log(window.__active_chater);
					console.log("test");
					console.log(window.__display_active_chatter);
					ReactDOM.render(<SudoChatBox M={window.__display_active_chatter} />,document.getElementById('_chat_container'));

				},true);

				window.addEventListener("chat_head_own_child",(evt) => {
					evt.detail.forEach( (a,b) => {
						console.log("barak obama");
						console.log(b);
						console.log(a);
						ReactDOM.render(<ChatBoxBodyHidden pr={JSON.stringify(a)} />,document.getElementById(`${a.id}`))
					} )
				},true);
			}
			componentDidMount(){
				/*var that=this;
				Rx.Observable.ajax({ url: '/myLinkedFaces', responseType: 'json',method:'GET'}).map(data=>data.response)
				.subscribe(
				function (data) {
					console.log(data);
					that.setState({
						faceMapper:data.All
					})
				},
				function (error) {
					console.log(error);
				}
			);*/


			}
			render(){
				if (this.state.faceMapper.length==0) {
					return (
						<div style={homeBodyMainStyle}>
							<div style={home_p_three_white}>
								<div id="_pyar_wala_part_3" style={partThreeTrndings}>
									<YoutubeMostPopular />
								</div>
								<div id="_part_three_home_u_id_f_hs" style={partThreeLinkedFaces}>
									<div style={mlMyLinkFSup}>
										<font style={myLfTextStyle} size={4}>My linked faces</font>
									</div>
									<p style={non_empty_end}>You don't have any linked faces right now please browse the best face match via search box present on header .</p>
								</div>
							</div>
						</div>
					)
				}else {
					return (
						<div style={homeBodyMainStyle}>
							<div style={home_p_three_white}>
								<div id="_pyar_wala_part_3" style={partThreeTrndings}>
									<YoutubeMostPopular />
								</div>
								<div id="_part_three_home_u_id_f_hs" style={partThreeLinkedFaces}>
									<div style={mlMyLinkFSup}>
										<font style={myLfTextStyle} size={4}>My linked faces</font>
									</div>
									{
										this.state.faceMapper.map( (a,b) => {
											return (
												<div key={b} style={myLinkefaceUI} onClick={this._mm_faceClickOpenChat}>
													<img src={a[2]} style={myImgStyleOfLogoFacesLinked} />{
														a[0]
													}
													<input type="hidden" value={JSON.stringify(a)} />
												</div>
											)
										} )
									}
								</div>
							</div>
						</div>
					)
				}
			}
		}
		ReactDOM.render(<HomeBodyPartThree />,document.getElementById('_bdy_part_3'));
	</script>
{{end}}
